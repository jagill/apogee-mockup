@backgroundColorDefault: #FFF;
@backgroundColorAlt: #F9F9F9;
@backgroundColorHover: #F5F5F5;
@backgroundColorSelected: rgb(125, 176, 217);

@textColorDefault: #333;
@textColorSelected: #fff;
@textColorSecondary: #666;

@borderRadius: 4px;
@baseFontSize: 12px;


.top-divider {
  border-top: 1px solid #dddddd;
}

.rounded-border (@radius: 4px) {
  border: 1px solid #dddddd;
  border-collapse: separate;
  *border-collapse: collapse;
  -webkit-border-radius: @radius;
  -moz-border-radius: @radius;
  -ms-border-radius: @radius;
  -o-border-radius: @radius;
  border-radius: @radius;
}

.roundedBorder {
    .rounded-border(@borderRadius);
}    

div.module {
    .rounded-border(@borderRadius);
    margin: 16px 0;

    h4 {
        padding-left: 16px;
    }

    span, li {
        margin-left: 16px;
    }
}

/////////////
// Status panel

@colorError: #AF3E37;
@colorWarning: #E68C2F;
@colorInfo: #3F83A1;
@colorOk: #568E45;

span.ok {
    color: @colorOk;
    
    &:before {
        content: url("/images/accept.png");
        padding-right: 4px;
    }
}

#testStatus {
    ul#testFailures {
        li {
            list-style-image: url('/images/delete.png');
            color: @colorError;
        }
    }

}

#codeIssues {
    li.error {
        list-style-image: url('/images/delete.png');
        color: @colorError;
    }
    li.warning {
        list-style-image: url('/images/warning.png');
        color: @colorWarning;
    }
    li.info {
        list-style-image: url('/images/info.png');
        color: @colorInfo;
    }
}

#latestChanges {

  ul {
      margin-left: 0;
  }

  li {
      list-style-type: none;
      margin-left: 0px;
  }

  .username {
      color: @colorInfo;
  }
  
  .timestamp {
      color: @colorInfo;
      float: right;
      padding-right: 16px;
  }

  .changeHash {
      color: @textColorSecondary;
      font-size: 9px;
  }

  .description {
      color: @textColorSecondary;
  }

  .changeEntry {
      .top-divider;
      padding-top: 4px;
  }

}

////////////
// fileTree


.fileTree-indent(@numIndents) {
  padding-left: (16px * @numIndents);
}

ul.fileTree {
    margin-left: 0px;
    /*.rounded-border(@borderRadius);*/

    span {
        font-size: @baseFontSize;
    }

    li {
        list-style-type: none;
        background-color: @backgroundColorDefault;
        color: @textColorDefault;

        &:nth-child(odd) {
            background-color: @backgroundColorAlt;
        }

        &:hover {
            background-color: @backgroundColorHover;
        }

        &.selected {
            background-color: @backgroundColorSelected;
            color: @textColorSelected;
        }

        &.file:before {
            content: url('/images/full_page.png');
        }

        &.directory.open:before {
            content: url('/images/add_to_folder.png');
        }

        &.directory.closed:before {
            content: url('/images/folder.png');
        }

        // TODO: Surely there is a way to match regexs?
        &.level1 { .fileTree-indent(1); } 
        &.level2 { .fileTree-indent(2); } 
        &.level3 { .fileTree-indent(3); } 
        &.level4 { .fileTree-indent(4); } 
        &.level5 { .fileTree-indent(5); } 
        &.level6 { .fileTree-indent(6); }
        &.level7 { .fileTree-indent(7); }
        &.level8 { .fileTree-indent(8); }
        &.level9 { .fileTree-indent(9); }
        &.level10 { .fileTree-indent(10); }
        &.level11 { .fileTree-indent(11); }
        &.level12 { .fileTree-indent(12); }
    }

}

#fileBody {
    .top-divider;
}

    
